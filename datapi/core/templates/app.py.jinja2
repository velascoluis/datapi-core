import sys
import asyncio

# Prevent uvloop from being imported
sys.modules['uvloop'] = None

# Ensure we're using the default event loop policy
asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())

# Prevent IPython from being imported
sys.modules['IPython'] = None

import json
import numpy as np
import logging
from fastapi import FastAPI
from pyiceberg.catalog.rest import RestCatalog
from datapi.core.utils import run_malloy_query
import os
from fastapi.responses import JSONResponse
import weakref
import pandas as pd

from fastapi import FastAPI
from fastapi.openapi.docs import get_swagger_ui_html
from fastapi.openapi.utils import get_openapi

class CustomJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        elif isinstance(obj, pd.DataFrame):
            return obj.to_dict(orient='records')
        elif isinstance(obj, pd.Series):
            return obj.to_dict()
        elif isinstance(obj, weakref.ReferenceType):
            return None  # or some other placeholder value
        else:
            return super().default(obj)

app = FastAPI(docs_url=None, redoc_url=None, openapi_url=None)

def _get_pyiceberg_catalog(polaris_uri,credentials,catalog_name):
    return RestCatalog(
        name="polaris",
        uri=polaris_uri,
        warehouse=catalog_name,
        credential=credentials,
        scope="PRINCIPAL_ROLE:ALL",
    )
    

@app.get("/get_data")
async def get_data():
    catalog = _get_pyiceberg_catalog(
        polaris_uri="{{ polaris_uri }}",
        credentials="{{ credentials }}",
        catalog_name="{{ catalog_name }}"
)
    source = """{{ source }}"""
    query = """{{ query }}"""
    table = catalog.load_table("{{ namespace_name }}.{{ table_name }}")
    con = table.scan().to_duckdb(table_name="{{ table_name }}")
    result = await run_malloy_query(con, source, query)
    try:
        if isinstance(result, pd.DataFrame):
            json_result = json.dumps(result.to_dict(orient='records'), cls=CustomJSONEncoder)
        else:
            json_result = json.dumps(result, cls=CustomJSONEncoder)
        return JSONResponse(content=json.loads(json_result))
    except Exception as e:
        logging.error(f"Serialization failed: {str(e)}")
        return JSONResponse(content={"error": f"Serialization failed: {str(e)}"}, status_code=500)
    

@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url="/openapi.json",
        title="API Docs",
        oauth2_redirect_url="/docs/oauth2-redirect",
        swagger_js_url="https://unpkg.com/swagger-ui-dist@4/swagger-ui-bundle.js",
        swagger_css_url="https://unpkg.com/swagger-ui-dist@4/swagger-ui.css",
    )

@app.get("/openapi.json", include_in_schema=False)
async def get_open_api_endpoint():
    return get_openapi(title="FastAPI", version="1.0.0", routes=app.routes)

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8080))
    uvicorn.run(app, host="0.0.0.0", port=port)